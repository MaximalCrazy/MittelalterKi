@page "/KI_Simulator"
@using System;
@using System.Threading
@using System.Collections.Generic;



@*<input id="geschwindigkeit" type="number" @bind="geschwindigkeitSimulation" />*@ @*Geschwindigkeit der Simulation*@
<!doctype html>
<html lang="de">
<body>
    <div class="w-75 float-left">

        <div class="container">
            <div class="row mb-2">
                <div class="col">
                    <h1>Simulation Dorfbewohner</h1>
                </div>
            </div>
        </div>

        <div class="container">
            <div class="row mb-2">
                <div class="col">
                    <span>Aktuelle Geschwindigkeit: @geschwindigkeitSimulation</span>
                    @*<span>Aktuelles MinLogLevel: @Logger.MinLogLevel</span>*@
                </div>
            </div>
            <div class="row mb-3">
                <div class="col">
                    <button class="btn btn-primary" @onclick="Simulation">Starte Simulation</button>
                </div>
            </div>
            <div class="row mb-1">
                <div class="col">
                    <p>Aktuelle Lebenspunkte: @Lebenspunkte</p>
                </div>
                <div class="col">
                    <p>Aktuelle Ausdauer: @Ausdauer</p>
                </div>
                <div class="col">
                    <p>Aktuelles Wasser: @Wasser</p>
                </div>
                <div class="col">
                    <p>Aktuelle Nahrung: @Nahrung</p>
                </div>
            </div>
        </div>

        <div class="container">
            <div class="row mb-1">
                <div class="col">

                </div>
                <div class="col">

                </div>
                <div class="col">
                    <button class="btn btn-primary" @onclick="@(e => ErhöheWasser(100))">Erhöhe Wasser</button>
                </div>
                <div class="col">
                    <button class="btn btn-primary" @onclick="@(e => ErhöheNahrung(100))">Erhöhe Nahrung</button>
                </div>
            </div>
        </div>

        <div class="container">
            <div class="row mb-1">
                <div class="col">

                </div>
                <div class="col">

                </div>
                <div class="col">
                    <button class="btn btn-primary" @onclick="@(e => ReduziereWasser(100))">Reduziere Wasser</button>
                </div>
                <div class="col">
                    <button class="btn btn-primary" @onclick="@(e => ReduziereNahrung(100))">Reduziere Nahrung</button>
                </div>
            </div>
        </div>
    </div>

    <div class="w-25 h-auto float-left mt-5 border">
        <div class="row mb-1">
            <ul>
                @foreach (var item in VerlaufHystorienQueue)
                {
                    <li>
                        <p>@item</p>
                    </li>

                    @*<li class="@item.LogLevel">
                        <p>@item.Nr: @item.Msg</p>
                    </li>*@
                }
            </ul>
        </div>
    </div>

</body>
</html>

@code {

    //public Queue<string> VerlaufHystorie {
    //    get { return null; }
    //    set { VerlaufHystorie = value; }
    //}


    //ToDo: lernen
    //[Parameter]
    //public EventCallback<int> ExterneMethode { get; set; }

    int anzahlVerlaufsElemente = 20;

    private Queue<string> _VerlaufHystorienQueue;

    public Queue<string> VerlaufHystorienQueue
    {
        get
        {
            if (_VerlaufHystorienQueue == null)
            {
                _VerlaufHystorienQueue = erstelleHystorie();
            }
            return _VerlaufHystorienQueue;
        }
        set
        {
            if (value == null)
            {
                throw new ArgumentNullException();
            }
            if (!(value.Count > 0))
            {
                VerlaufHystorienQueue = erstelleHystorie();
            }

            _VerlaufHystorienQueue = value;

            StateHasChanged();
        }
    }

    public Queue<string> erstelleHystorie()
    {
        Queue<string> verlaufHystorienQueue = new Queue<string>();
        //verlaufHystorienQueue.Enqueue("Text 1");
        //verlaufHystorienQueue.Enqueue("Text 2");
        //verlaufHystorienQueue.Enqueue("Text 3");

        return verlaufHystorienQueue;
    }

    public void löscheAnzahlLetzterEinträge(int maximalEinträge)
    {
        while (maximalEinträge <= _VerlaufHystorienQueue.Count +1)
        {
            _VerlaufHystorienQueue.Dequeue();
        }
    }

    void aktualisiereHystorie(string nachricht)
    {
        _VerlaufHystorienQueue.Enqueue(nachricht);
        if (_VerlaufHystorienQueue.Count > anzahlVerlaufsElemente)
        {
            löscheAnzahlLetzterEinträge(anzahlVerlaufsElemente);
        }
    }
}


@code {
    private bool _simulationAktiv;

    int geschwindigkeitSimulation = 1;

    #region Private Felder

    private int _lebenspunkte = 1000;
    private int _ausdauer = 100;
    private int _wasser = 1000;
    private int _nahrung = 1000;
    private bool _verdursten;
    private bool _verhungern;
    private bool _erschöpft;

    #endregion


    #region Properties

    private int Lebenspunkte
    {
        get => _lebenspunkte;
        set
        {
            if (value <= 0)
            {
                _lebenspunkte = 0;
                charakterGestorben();
            }
            _lebenspunkte = value;
            StateHasChanged();

            //interne funktion für BL
        }
    }

    void charakterGestorben()
    {
        //ToDo: charakterGestorben()

        aktualisiereHystorie("Spieler Gestorben");

        //Macht nur bei einem Spieler zum testen Sinn.
        _simulationAktiv = false;
    }

    private int Ausdauer
    {
        get => _ausdauer;
        set
        {
            if (value <= 0)
            {
                if (!_erschöpft)
                {
                    aktualisiereHystorie("Spieler erschöpft!");
                }
                _erschöpft = true;
                _ausdauer = 0;
            }
            else if (_erschöpft && value > 0)
            {
                aktualisiereHystorie("Spieler nicht mehr erschöpft.");
                _ausdauer = value;
                _erschöpft = false;
            }
            else
            {
                _ausdauer = value;
                _erschöpft = false;
            }
            StateHasChanged();
        }
    }

    private int Wasser
    {
        get => _wasser;
        set
        {
            if (value <= 0)
            {
                if (!_verdursten)
                {
                    aktualisiereHystorie("Spieler am verdursten!");
                }
                _verdursten = true;
                _wasser = 0;
            }
            else if (_verdursten && value > 0)
            {
                aktualisiereHystorie("Spieler nicht mehr am verdursten.");
                _verdursten = false;
                _wasser = value;
            }
            else
            {
                _verdursten = false;
                _wasser = value;
            }
            StateHasChanged();
        }
    }

    private int Nahrung
    {
        get => _nahrung;
        set
        {
            if (value <= 0)
            {
                if (!_verhungern)
                {
                    aktualisiereHystorie("Spieler am verhungern!");
                }
                _verhungern = true;
                _nahrung = 0;
            }
            else if (_verhungern && value > 0)
            {
                aktualisiereHystorie("Spieler nicht mehr am verhungern.");
                _verhungern = false;
                _nahrung = value;
            }
            else
            {
                _verhungern = false;
                _nahrung = value;
            }
            StateHasChanged();
        }
    }

    #endregion


    private async Task Simulation()
    {
        //Aktivieren / deaktivieren
        _simulationAktiv = !_simulationAktiv;

        while (_simulationAktiv)
        {
            //Lebenspunkte -= 5; //Nur, wenn Grund vorhanden
            //Ausdauer -= 0; //Abhängig vom Status "Rennen"
            Wasser -= 10;
            Nahrung -= 5;
                        
            await Verzögerung(1);

            //statemaschine.doTick()
        }
    }

    //ToDo: void FrageGrundwerteAb(Grundwerte Model)





    private void ErhöheNahrung(int menge)
    {
        if (menge == 0) { menge = 100; }
        Nahrung += menge;
        aktualisiereHystorie("Nahrung um: 100 manuel erhöht");
    }
    private void ReduziereNahrung(int menge)
    {
        if (menge == 0) { menge = 100; }
        Nahrung -= menge;
        aktualisiereHystorie("Nahrung um: 100 manuel reduziert");
    }

    private void ErhöheWasser(int menge)
    {
        if (menge == 0) { menge = 100; }
        Wasser += menge;

        aktualisiereHystorie("Wasser um: 100 manuel erhöht");
    }
    private void ReduziereWasser(int menge)
    {
        if (menge == 0) { menge = 100; }
        Wasser -= menge;
        aktualisiereHystorie("Wasser um: 100 manuel reduziert");
    }


    private async Task Verzögerung(int sekunden)
    {
        await Task.Delay(sekunden * 1000 / geschwindigkeitSimulation);
    }

}

<style>
</style>


<!-- Archiv -->
<!-- #region Threading über den Setter -->
@*<p>Aktueller Thread: @LastThreadId</p>

    @code {
        private int _test = 100;
        private int LastThreadId { get; set; }

        private int Test
        {
            get => _test;
            set
            {
                _test = value;
                LastThreadId = Thread.CurrentThread.ManagedThreadId;
                StateHasChanged();
            }
        }
    }*@

<!-- #endregion -->
